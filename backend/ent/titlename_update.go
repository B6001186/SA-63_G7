// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/B6001186/app/ent/employee"
	"github.com/B6001186/app/ent/predicate"
	"github.com/B6001186/app/ent/titlename"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TitlenameUpdate is the builder for updating Titlename entities.
type TitlenameUpdate struct {
	config
	hooks      []Hook
	mutation   *TitlenameMutation
	predicates []predicate.Titlename
}

// Where adds a new predicate for the builder.
func (tu *TitlenameUpdate) Where(ps ...predicate.Titlename) *TitlenameUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetName sets the Name field.
func (tu *TitlenameUpdate) SetName(s string) *TitlenameUpdate {
	tu.mutation.SetName(s)
	return tu
}

// AddEmployeeIDs adds the employee edge to Employee by ids.
func (tu *TitlenameUpdate) AddEmployeeIDs(ids ...int) *TitlenameUpdate {
	tu.mutation.AddEmployeeIDs(ids...)
	return tu
}

// AddEmployee adds the employee edges to Employee.
func (tu *TitlenameUpdate) AddEmployee(e ...*Employee) *TitlenameUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.AddEmployeeIDs(ids...)
}

// Mutation returns the TitlenameMutation object of the builder.
func (tu *TitlenameUpdate) Mutation() *TitlenameMutation {
	return tu.mutation
}

// RemoveEmployeeIDs removes the employee edge to Employee by ids.
func (tu *TitlenameUpdate) RemoveEmployeeIDs(ids ...int) *TitlenameUpdate {
	tu.mutation.RemoveEmployeeIDs(ids...)
	return tu
}

// RemoveEmployee removes employee edges to Employee.
func (tu *TitlenameUpdate) RemoveEmployee(e ...*Employee) *TitlenameUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.RemoveEmployeeIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TitlenameUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TitlenameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TitlenameUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TitlenameUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TitlenameUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TitlenameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   titlename.Table,
			Columns: titlename.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: titlename.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: titlename.FieldName,
		})
	}
	if nodes := tu.mutation.RemovedEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titlename.EmployeeTable,
			Columns: []string{titlename.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titlename.EmployeeTable,
			Columns: []string{titlename.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{titlename.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TitlenameUpdateOne is the builder for updating a single Titlename entity.
type TitlenameUpdateOne struct {
	config
	hooks    []Hook
	mutation *TitlenameMutation
}

// SetName sets the Name field.
func (tuo *TitlenameUpdateOne) SetName(s string) *TitlenameUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// AddEmployeeIDs adds the employee edge to Employee by ids.
func (tuo *TitlenameUpdateOne) AddEmployeeIDs(ids ...int) *TitlenameUpdateOne {
	tuo.mutation.AddEmployeeIDs(ids...)
	return tuo
}

// AddEmployee adds the employee edges to Employee.
func (tuo *TitlenameUpdateOne) AddEmployee(e ...*Employee) *TitlenameUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.AddEmployeeIDs(ids...)
}

// Mutation returns the TitlenameMutation object of the builder.
func (tuo *TitlenameUpdateOne) Mutation() *TitlenameMutation {
	return tuo.mutation
}

// RemoveEmployeeIDs removes the employee edge to Employee by ids.
func (tuo *TitlenameUpdateOne) RemoveEmployeeIDs(ids ...int) *TitlenameUpdateOne {
	tuo.mutation.RemoveEmployeeIDs(ids...)
	return tuo
}

// RemoveEmployee removes employee edges to Employee.
func (tuo *TitlenameUpdateOne) RemoveEmployee(e ...*Employee) *TitlenameUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.RemoveEmployeeIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tuo *TitlenameUpdateOne) Save(ctx context.Context) (*Titlename, error) {

	var (
		err  error
		node *Titlename
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TitlenameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TitlenameUpdateOne) SaveX(ctx context.Context) *Titlename {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TitlenameUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TitlenameUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TitlenameUpdateOne) sqlSave(ctx context.Context) (t *Titlename, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   titlename.Table,
			Columns: titlename.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: titlename.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Titlename.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: titlename.FieldName,
		})
	}
	if nodes := tuo.mutation.RemovedEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titlename.EmployeeTable,
			Columns: []string{titlename.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   titlename.EmployeeTable,
			Columns: []string{titlename.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Titlename{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{titlename.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
