// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/B6001186/app/ent/department"
	"github.com/B6001186/app/ent/employee"
	"github.com/B6001186/app/ent/place"
	"github.com/B6001186/app/ent/titlename"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Employee is the model entity for the Employee schema.
type Employee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "User_id" field.
	UserID string `json:"User_id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Tel holds the value of the "Tel" field.
	Tel string `json:"Tel,omitempty"`
	// Email holds the value of the "Email" field.
	Email string `json:"Email,omitempty"`
	// BirthdayDate holds the value of the "BirthdayDate" field.
	BirthdayDate time.Time `json:"BirthdayDate,omitempty"`
	// AttendTime holds the value of the "AttendTime" field.
	AttendTime time.Time `json:"AttendTime,omitempty"`
	// FinishTime holds the value of the "FinishTime" field.
	FinishTime time.Time `json:"FinishTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeQuery when eager-loading is set.
	Edges               EmployeeEdges `json:"edges"`
	department_employee *int
	place_employee      *int
	titlename_employee  *int
}

// EmployeeEdges holds the relations/edges for other nodes in the graph.
type EmployeeEdges struct {
	// Department holds the value of the department edge.
	Department *Department
	// Place holds the value of the place edge.
	Place *Place
	// Titlename holds the value of the titlename edge.
	Titlename *Titlename
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[0] {
		if e.Department == nil {
			// The edge department was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) PlaceOrErr() (*Place, error) {
	if e.loadedTypes[1] {
		if e.Place == nil {
			// The edge place was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: place.Label}
		}
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// TitlenameOrErr returns the Titlename value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) TitlenameOrErr() (*Titlename, error) {
	if e.loadedTypes[2] {
		if e.Titlename == nil {
			// The edge titlename was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: titlename.Label}
		}
		return e.Titlename, nil
	}
	return nil, &NotLoadedError{edge: "titlename"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Employee) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // User_id
		&sql.NullString{}, // Name
		&sql.NullString{}, // Tel
		&sql.NullString{}, // Email
		&sql.NullTime{},   // BirthdayDate
		&sql.NullTime{},   // AttendTime
		&sql.NullTime{},   // FinishTime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Employee) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // department_employee
		&sql.NullInt64{}, // place_employee
		&sql.NullInt64{}, // titlename_employee
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Employee fields.
func (e *Employee) assignValues(values ...interface{}) error {
	if m, n := len(values), len(employee.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field User_id", values[0])
	} else if value.Valid {
		e.UserID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[1])
	} else if value.Valid {
		e.Name = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Tel", values[2])
	} else if value.Valid {
		e.Tel = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Email", values[3])
	} else if value.Valid {
		e.Email = value.String
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field BirthdayDate", values[4])
	} else if value.Valid {
		e.BirthdayDate = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field AttendTime", values[5])
	} else if value.Valid {
		e.AttendTime = value.Time
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field FinishTime", values[6])
	} else if value.Valid {
		e.FinishTime = value.Time
	}
	values = values[7:]
	if len(values) == len(employee.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department_employee", value)
		} else if value.Valid {
			e.department_employee = new(int)
			*e.department_employee = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field place_employee", value)
		} else if value.Valid {
			e.place_employee = new(int)
			*e.place_employee = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field titlename_employee", value)
		} else if value.Valid {
			e.titlename_employee = new(int)
			*e.titlename_employee = int(value.Int64)
		}
	}
	return nil
}

// QueryDepartment queries the department edge of the Employee.
func (e *Employee) QueryDepartment() *DepartmentQuery {
	return (&EmployeeClient{config: e.config}).QueryDepartment(e)
}

// QueryPlace queries the place edge of the Employee.
func (e *Employee) QueryPlace() *PlaceQuery {
	return (&EmployeeClient{config: e.config}).QueryPlace(e)
}

// QueryTitlename queries the titlename edge of the Employee.
func (e *Employee) QueryTitlename() *TitlenameQuery {
	return (&EmployeeClient{config: e.config}).QueryTitlename(e)
}

// Update returns a builder for updating this Employee.
// Note that, you need to call Employee.Unwrap() before calling this method, if this Employee
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Employee) Update() *EmployeeUpdateOne {
	return (&EmployeeClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Employee) Unwrap() *Employee {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Employee is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Employee) String() string {
	var builder strings.Builder
	builder.WriteString("Employee(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", User_id=")
	builder.WriteString(e.UserID)
	builder.WriteString(", Name=")
	builder.WriteString(e.Name)
	builder.WriteString(", Tel=")
	builder.WriteString(e.Tel)
	builder.WriteString(", Email=")
	builder.WriteString(e.Email)
	builder.WriteString(", BirthdayDate=")
	builder.WriteString(e.BirthdayDate.Format(time.ANSIC))
	builder.WriteString(", AttendTime=")
	builder.WriteString(e.AttendTime.Format(time.ANSIC))
	builder.WriteString(", FinishTime=")
	builder.WriteString(e.FinishTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Employees is a parsable slice of Employee.
type Employees []*Employee

func (e Employees) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
